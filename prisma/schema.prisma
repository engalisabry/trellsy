generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Profile {
  id                  String                @id @default(uuid()) @db.Uuid
  full_name           String?
  avatar_url          String?
  email               String?               @unique
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @updatedAt
  OrganizationMembers OrganizationMembers[]

  @@schema("public")
}

model Organization {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  slug                   String                   @unique
  created_at             DateTime?                @default(now())
  updated_at             DateTime?                @default(now()) @updatedAt
  logo_url               String?
  metadata               Json?                    @default("{}")
  created_by             String
  Board                  Board[]
  OrganizationInvitation OrganizationInvitation[]
  members                OrganizationMembers[]

  @@schema("public")
}

model OrganizationMembers {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String
  role            String
  created_at      DateTime?    @default(now())
  profile_id      String?      @db.Uuid
  organization    Organization @relation(fields: [organization_id], references: [id])
  profile         Profile?     @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  avatar_url      String?

  @@unique([organization_id, profile_id])
  @@schema("public")
}

model OrganizationInvitation {
  id              String       @id @default(uuid())
  organization_id String
  email           String
  role            String
  invited_by      String
  status          String
  token           String       @unique
  created_at      DateTime     @default(now())
  accepted_at     DateTime?
  revoked_at      DateTime?
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([email])
  @@schema("public")
}

model Board {
  id              String       @id @default(uuid())
  title           String
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@schema("public")
}
